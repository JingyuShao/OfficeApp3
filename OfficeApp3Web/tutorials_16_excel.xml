<?xml version="1.0" encoding="utf-8"?>
<content xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <scenario title="Write and Read a Chart">
        <tasks>
            <task title="Step 1 of 3. Create data source" id="createDataSource">
                <code id="createDataSource">
                  <![CDATA[
// Create a range to be the data source of the chart
Excel.run(function (ctx) {
    var sheet = ctx.workbook.worksheets.getActiveWorksheet();

    var categoriesRange = sheet.getRange("A2:A5");
    categoriesRange.values = [
        ["Category 1"],
        ["Category 2"],
        ["Category 3"],
        ["Category 4"]
    ];

    var seriesRange = sheet.getRange("B1:D1");
    seriesRange.values = [
        ["Series 1", "Series 2", "Series 3", ]
    ];

    var dataRange = sheet.getRange("B2:D5");
    dataRange.values = [
        [2, 8, 7],
        [15, 11, 13],
        [1, 9, 7],
        [14, 14, 8]
    ];

    return ctx.sync()
        .then(function () {
            showMessage("Success! Click the Next button to move on.");
        })
        .catch(function (error) {
            if (error instanceof OfficeExtension.Error) {
                showMessage("Action failed with error: " + JSON.stringify(error.debugInfo));
            }
        });
});

        ]]></code>
            </task>
            <task title="Step 2 of 3. Create chart" id="createChart">
                <code id="createChart">
                  <![CDATA[
// Create a column clustered chart named Chart1
Excel.run(function (ctx) {
    var chartsource = ctx.workbook.worksheets.getActiveWorksheet().getRange("A1:D5");
    var chart = ctx.workbook.worksheets.getActiveWorksheet().charts.add("ColumnClustered", chartsource, Excel.ChartSeriesBy.auto);
    chart.name = "Chart1";
    chart.load("name");

    return ctx.sync()
        .then(function () {
            showMessage("Success! " + chart.name + " was added. Click the Next button to move on.");
        })
        .catch(function (error) {
            if (error instanceof OfficeExtension.Error) {
                showMessage("Action failed with error: " + JSON.stringify(error.debugInfo));
            }
        });
});


        ]]></code>
            </task>
            <task title="Step 3 of 3. Read the chart name" id="readChartName">
                <code id="readChartName">
                  <![CDATA[
// Read back the name of the chart added in the previous step.
Excel.run(function (ctx) {
    var chart = ctx.workbook.worksheets.getActiveWorksheet().charts.getItem("Chart1");
    chart.load("name");

    return ctx.sync()
        .then(function () {
            showMessage("Success! " + chart.name + " is the name of the chart added in the previous step.");
        })
        .catch(function (error) {
            if (error instanceof OfficeExtension.Error) {
                showMessage("Action failed with error: " + JSON.stringify(error.debugInfo));
            }
        });
});

        ]]></code>
            </task>                      
        </tasks>
    </scenario>
  <scenario title="Bind to Data">
    <tasks>
      <task title="Step 1 of 3. Create a table" id="1">
        <code id="createATable">
          <![CDATA[
// Create a table
Excel.run(function (ctx) { 
    ctx.workbook.tables.add("A1:C4", true);
    return ctx.sync().then(function() {
             showMessage("My Table Created!");
    })
    .catch(function (error) {
             showMessage(JSON.stringify(error));
    });
});

        ]]>
        </code>
      </task>
      <task title="Step 2 of 3. Create a new table binding for the table" id="2">
        <code id="createBindingForTheTable">
          <![CDATA[
Office.context.document.bindings.addFromNamedItemAsync('Table1', Office.CoercionType.Table, { id: "myBinding" }, function (asyncResult) {
    if (asyncResult.status == "failed") {
        showMessage("Action failed with error: " + asyncResult.error.message);
    }
    else {
        // If successful, add the event handler to the table binding.
        Office.select("bindings#myBinding").addHandlerAsync(Office.EventType.BindingDataChanged, 
        onBindingDataChanged,
        function (asyncResult) {
            if (asyncResult.status == "failed") {
              showMessage("Action failed with error: " + asyncResult.error.message);
            } else {
              showMessage("Event handler added successfully." +
                " Now try to change some data in the table.");
            }
		  });
	 }
});

// When data in the table is changed, this event is triggered.
function onBindingDataChanged(eventArgs) {
    Excel.run(function (ctx) { 
        // Highlight the table in orange to indicate data changed.
        ctx.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = "Orange";
        return ctx.sync().then(function() {
             showMessage("The value in this table got changed!");
        })
        .catch(function (error) {
             showMessage(JSON.stringify(error));
        });
    });
}

        ]]>
        </code>
      </task>
      <task title="Step 3 of 3. Remove the binding" id="3">
        <code id="removeTableBinding">
          <![CDATA[
Office.context.document.bindings.releaseByIdAsync("myBinding", 
    function (asyncResult) {
      if (asyncResult.status == "failed") {
        showMessage("Action failed with error: " + asyncResult.error.message);
      } else {
        showMessage("Event handler remove succeeded");
      }
});
        ]]>
        </code>
      </task>
    </tasks>
  </scenario>
  <scenario title="Write and Read a Worksheet">
    <tasks>
      <task title="Step 1 of 2. Add a new worksheet" id="addNewWorksheet">
        <code id="addNewWorksheet">
          <![CDATA[
// Add a new worksheet named MyWorksheet.
Excel.run(function (ctx) {
    var myWorksheet = ctx.workbook.worksheets.add("MyWorksheet");
    myWorksheet.load("name");

    return ctx.sync()
        .then(function () {
            showMessage("Success! " + myWorksheet.name + " was added. Click the Next button to move on.");
        })
        .catch(function (error) {
            if (error instanceof OfficeExtension.Error) {
                showMessage("Action failed with error: " + JSON.stringify(error.debugInfo));
            }
        });
});
        ]]>
        </code>
      </task>
      <task title="Step 2 of 2. Read the index of the worksheet" id="readNameofIndex">
        <code id="readNameofIndex">
          <![CDATA[
// Read the index of the worksheet added in previous step
Excel.run(function (ctx) {
    var myWorksheet = ctx.workbook.worksheets.getItem("MyWorksheet");
    myWorksheet.load("position");

    return ctx.sync()
        .then(function () {
            showMessage("Success! " + myWorksheet.position + " is position (zero based) of the worksheet added in the previous step.");
        })
        .catch(function (error) {
            if (error instanceof OfficeExtension.Error) {
                showMessage("Action failed with error: " + JSON.stringify(error.debugInfo));
            }
        });
});


        ]]>
        </code>
      </task>     
    </tasks>
  </scenario>
  <scenario title="Write and Read Text">
    <tasks>
      <task title="Step 1 of 2. Write text to user selection" id="writeSelectedDataText">
        <code id="writeSelectedDataText">
          <![CDATA[
//Write text to the current user selection
Office.context.document.setSelectedDataAsync(
  "Hello World!", 
  function (asyncResult) {
    if (asyncResult.status == "failed") {
      showMessage("Action failed with error: " + asyncResult.error.message);
    } else {
      showMessage("Success! Click the Next button to move on.");
  }
});
        ]]>
        </code>
      </task>
      <task title="Step 2 of 2. Read text from user selection" id="readSelectedDataText" description="The &lt;a href='http://msdn.microsoft.com/en-us/library/office/apps/fp142295' target='_blank'&gt;Document&lt;/a&gt; object also exposes the &lt;a href='http://msdn.microsoft.com/en-us/library/office/apps/fp142294' target='_blank'&gt;getSelectedDataAsync&lt;/a&gt; method to read from the user's current selection in a document or spreadsheet. The following example uses this method to read text from the spreadsheet by specifying the &lt;a href='https://msdn.microsoft.com/EN-US/library/office/fp161141.aspx' target='_blank'&gt;coercionType&lt;/a&gt; parameter as &lt;a href='http://msdn.microsoft.com/en-us/library/office/apps/fp161141' target='_blank'&gt;CoercionType.Text&lt;/a&gt;. You can also use the getSelectedDataAsync method to read range (matrix) and table data in Excel and Word, specifying either of those data types as the coercionType parameter of the method. The callback function returns an object containing the data currently selected by the user, which can use the asyncResult.value property to access the selected data.">
        <code id="readSelectedDataTextIntro">
          <![CDATA[
//Read text from the user current selection
Office.context.document.getSelectedDataAsync(
  Office.CoercionType.Text, 
  function (asyncResult) {
    if (asyncResult.status == "failed") {
      showMessage("Action failed with error: " + asyncResult.error.message);
    } else {
      showMessage("Selected data: " + asyncResult.value +
      ". Click the Next button to choose a new tutorial.");
  }
});
        ]]>
        </code>
      </task>
    </tasks>
  </scenario>
  <scenario title="Write and Read a Range">
    <tasks>
      <task title="Step 1 of 2. Set multiple values in range" id="writeSelectedDataMatrix">
        <code id="writeSelectedDataMatrix">
          <![CDATA[
// Create a range to be the data source of the chart
Excel.run(function (ctx) {
    var sheet = ctx.workbook.worksheets.getActiveWorksheet();
    var range = sheet.getRange("A1:C3");
    range.values = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];

    return ctx.sync()
        .then(function () {
            showMessage("Success! Click the Next button to move on.");
        })
        .catch(function (error) {
            if (error instanceof OfficeExtension.Error) {
                showMessage("Action failed with error: " + JSON.stringify(error.debugInfo));
            }
        });
});

        ]]>
        </code>
      </task>
      <task title="Step 2 of 2. Get value of the range" id="readSelectedDataMatrix">
        <code id="readSelectedDataMatrix">
          <![CDATA[
Excel.run(function (ctx) {
	var range = ctx.workbook.worksheets.getActiveWorksheet().getRange("A1:C3").load("values");
  var result = '';
	return ctx.sync().then(function () {
		for (var i = 0; i < range.values.length; i++) {
			for (var j = 0; j < range.values[i].length; j++) {
				result += range.values[i][j] + ', ';
			}
		}
		showMessage(result);
	});
}).catch(function(error) {
	showMessage("Error: " + error);
	if (error instanceof OfficeExtension.Error) {
		showMessage("Debug info: " + JSON.stringify(error.debugInfo));
	}
});

        ]]>
        </code>
      </task>
    </tasks>
  </scenario>
  <scenario title="Write and Read a table">
    <tasks>
      <task title="Step 1 of 2. Create a new table" id="writeSelectedDataMatrix">
        <code id="writeSelectedDataMatrix">
          <![CDATA[
Excel.run(function (ctx) { 
    
    var table = ctx.workbook.tables.add('A1:C3', true);
    table.load('name');
    ctx.workbook.tables.getItem(table.name).tableRows.getItemAt(2).values = [["Brittney", "Booker", "A"]];
    return ctx.sync().then(function() {
        showMessage(table.name);
    });
}).catch(function(error) {
        showMessage("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            showMessage("Debug info: " + JSON.stringify(error.debugInfo));
        }
});

        ]]>
        </code>
      </task>
      <task title="Step 2 of 2. Get value of the range" id="readSelectedDataMatrix">
        <code id="readSelectedDataMatrix">
          <![CDATA[
Excel.run(function (ctx) {
	var range = ctx.workbook.worksheets.getActiveWorksheet().getRange("A1:C3").load("values");
	return ctx.sync().then(function () {
		for (var i = 0; i < range.values.length; i++) {
			for (var j = 0; j < range.values[i].length; j++) {
				showMessage(range.values[i][j]);
			}
		}
		showMessage("done");
	});
}).catch(function(error) {
	showMessage("Error: " + error);
	if (error instanceof OfficeExtension.Error) {
		showMessage("Debug info: " + JSON.stringify(error.debugInfo));
	}
});

        ]]>
        </code>
      </task>
    </tasks>
  </scenario>
</content>